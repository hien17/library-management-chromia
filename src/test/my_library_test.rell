@test module;

import ^^.library_management.
    { 
        create_library, 
        create_shelf, 
        create_book, 
        get_all_library, 
        get_library_by_name, 
        get_all_shelves, 
        get_all_books, 
        create_author,
        get_all_authors,
        get_all_books_with_authors,
        create_member,
        get_all_members,
        create_book_author,
        create_loan,
        get_all_loans
    };

function test_create_library() {
    // Create a new library with an address
    rell
        .test
        .tx()
        .op(
            create_library(
                "Lib0",
                "Str0",
                "Cty0",
                "PostalCode0"
            )
        )
        .op(
            create_library(
                "Lib1",
                "Str1",
                "City1",
                "PostalCode1"
            )
        )
        .run();

    val all_libraries = get_all_library();
    assert_equals(all_libraries.size(), 2);

    val library_name = all_libraries[1].library_name;
    for (n in range(1, 4)) {
        rell.test.tx()
            .op(create_shelf(n, library_name))
            .run();
    }

    val all_shalves = get_all_shelves();
    assert_equals(all_shalves.size(), 3);

    rell.test.tx()
        .op(create_book("Microeconomy", "Lib1", 1))
        .op(create_book("Macroeconomy", "Lib1", 2))
        .op(create_book("DSA", "Lib1", 3))
        .op(create_book("A art of living", "Lib1", 3))
        .run();

    val all_books = get_all_books();
    assert_equals(all_books.size(), 4);

    rell.test.tx()
        .op(create_author("Jame"))
        .op(create_author("Werner"))
        .op(create_author("George Orwel"))
        .op(create_author("Nguyen Duy Can"))
        .run();

    val all_authors = get_all_authors();
    assert_equals(all_authors.size(), 4);

    rell.test.tx()
        .op(create_book_author("Microeconomy", "Jame"))
        .op(create_book_author("Macroeconomy", "Werner"))
        .op(create_book_author("DSA", "George Orwel"))
        .op(create_book_author("A art of living", "Nguyen Duy Can"))
        .run();

    val all_books_with_authors = get_all_books_with_authors();
    assert_equals(all_books_with_authors.size(), 4);

    rell.test.tx()
        .op(create_member("Nam"))
        .run();

    rell.test.tx()
        .op(create_member("Bao"))
        .run();

    val all_members = get_all_members();
    assert_equals(all_members.size(), 2);

    rell.test.tx()
        .op(create_loan("Nam", "Microeconomy"))
        .op(create_loan("Nam", "Macroeconomy"))
        .op(create_loan("Nam", "DSA"))
        .run();

    rell.test.tx()
        .op(create_loan("Bao", "A art of living"))
        .run();

    val all_loans = get_all_loans();
    assert_equals(all_loans.size(), 4);
}
