@test module;

import ^^.library_management.{ create_library, create_shelf, create_book, get_all_library, get_library_by_name, get_all_shelves, get_all_books };

function test_create_library() {
    // Create a new library with an address
    rell
        .test
        .tx()
        .op(
            create_library(
                "Lib0",
                "Str0",
                "Cty0",
                "PostalCode0"
            )
        )
        .op(
            create_library(
                "Lib1",
                "Str1",
                "City1",
                "PostalCode1"
            )
        )
        .run();

    val all_libraries = get_all_library();
    assert_equals(all_libraries.size(), 2);

    val library_name = all_libraries[1].library_name;
    for (n in range(1, 4)) {
        rell.test.tx()
            .op(create_shelf(n, library_name))
            .run();
    }

    val all_shalves = get_all_shelves();
    assert_equals(all_shalves.size(), 3);

    rell.test.tx()
        .op(create_book("Microeconomy", "Lib1", 1))
        .op(create_book("Macroeconomy", "Lib1", 2))
        .op(create_book("DSA", "Lib1", 3))
        .run();

    val all_books = get_all_books();
    assert_equals(all_books.size(), 3);
}

function test_get_library_by_name() {
    // Create a new library with an address
    rell
        .test
        .tx()
        .op(
            create_library(
                "Central Library District 1",
                "Nguyen Huu Canh Street",
                "HCM City",
                "650000"
            )
        )
        .run();
    val library = get_library_by_name("Central Library District 1");
    assert_equals(library.address.street, "Nguyen Huu Canh Street");
}
